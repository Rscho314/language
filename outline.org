#+TITLE: Outline and ideas

* ZEN OF THE NEW THING (IN DECEASING ORDER OF IMPORTANCE)
  * Science is better than industry :: focus on data analysis, math & numeric computation
  * Simple is better than complex :: Scheme is the simplest
  * Interactive is better than static :: Common Lisp REPL with running program redefinition
  * Recycling is better than building anew :: easy FFI, steal as many libs as possible from other platforms
  * Extensible is better than rigid :: hygienic macro system
  * Fast is better than slow :: compile efficiently

* ROADMAP
  1) Write R7RS Scheme interpreter
  2) Prove interpreter
  3) Write JIT, prove if possible
  4) Write Nanopass comipler, prove if possible
  6) Make backends and compatbility layers, 1st LLVM via C
  7) Iterate

* TOOLS 
** Racket/Rosette (Z3 can handle floats, not minikanren)
** Nanopass

* NICE IDEAS
** REPL
*** Protorepl
*** REPL for both code and types
** UX
*** IDE with syntactic and *semantic* metadata (ex: colouring)
*** Barliman (Will Byrd)
** Typing
*** gradual typing
*** inference
*** separation of logic and types in paired files
*** one file with code resembling scheme
*** paired file with only types listed in same syntax
*** relational: paired files are checked for consistency
**** change in code file can change type file
**** change in type file is checked for consistency against code
*** Girard isomorphism, see Djinn language
** Standard libs
*** microkanren
** Paralellism :: what paradigm/lib? 
